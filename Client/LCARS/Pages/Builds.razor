@page "/builds"

<PageTitle>LCARS | Builds</PageTitle>

@using LCARS.Data

@implements IDisposable
@inject BuildsService buildsService

<Header Text="Builds" />

@if (builds == null)
{
    <Loading />
}
else
{
    <div class="container">
        @foreach (var build in builds)
        {
            <div class="build">
                <div class="left"></div>
                <div class="label">@build.DisplayName</div>
                <div class="data @GetStatusColor(build)">@GetBuildStatus(build)</div>
                <div class="right"></div>
            </div>
        }
    </div>
}

@code {
    private IEnumerable<Build>? builds;
    private System.Timers.Timer refreshTimer = new(5000);

    protected override async Task OnInitializedAsync()
    {
        await RefreshBuilds();

        refreshTimer.Elapsed += async (sender, e) => await RefreshBuilds();
        refreshTimer.Enabled = true;
    }

    private async Task RefreshBuilds()
    {
        builds = await buildsService.GetBuildsAsync();
        await InvokeAsync(StateHasChanged);
    }

    private string GetBuildStatus(Build build)
    {
        if (build.State == "finished")
            return build.Status == "SUCCESS" ? build.BuildNumber : "FAILED";
        else // running
            return $"{build.PercentageComplete}%";
    }

    private string GetStatusColor(Build build)
    {
        if (build.State  == "finished")
            return build.Status == "SUCCESS" ? "green" : "red";
        else // running
            return "yellow";
    }

    void IDisposable.Dispose()
    {
        refreshTimer.Enabled = false;
        refreshTimer.Dispose();
    }
}