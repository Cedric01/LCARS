
@inherits LayoutComponentBase

<PageTitle>LCARS</PageTitle>

<header>
    <div id="header-left" class="left">
        @DateTime.Now.ToString("dd-MM-yyyy")
    </div>
    <div class="middle">
        <table>
            @output
        </table>
    </div>
    <div class="right">
        <div class="title">
            LCARS OPERATIONS <span>ONLINE</span>
        </div>
        <div class="buttons">
            <div>07-3215</div>
            <div>08-5012</div>
            <div>09-3123</div>
            <div>10-2415</div>
        </div>
    </div>
    <div class="box-pattern">
        <span />
        <span />
        <span />
        <span />
    </div>
</header>
<div class="body">
    <aside>
        <div>
            <span><a href="/admin">CONFIG</a></span>
        </div>
        <div>
            <span>STATUS</span>
        </div>
        <div>
            <span>05-32456</span>
        </div>
        <div>
            <span>06-15868</span>
        </div>
    </aside>
    <main>
        <div class="box-pattern">
            <span />
            <span />
            <span />
            <span />
        </div>
        <div class="content">
            @Body
        </div>
    </main>
</div>

@code {
    private Random randomiser = new Random();
    private MarkupString output = new MarkupString();

    private void RenderDigits()
    {
        const int colCount = 13;
        const int rowCount = 6;

        var selectedRow = randomiser.Next(0, rowCount);

        var html = new System.Text.StringBuilder("<tbody>");

        for (var row = 0; row < rowCount; row++)
        {
            var rowClass = row == selectedRow ? "white" : "";
            html.AppendLine($"<tr class='{rowClass}'>");

            for (var col = 0; col < colCount; col++)
                html.Append($"<td>{randomiser.Next(1, 1000)}</td>");

            html.Append("</tr>");
        }

        html.Append("</tbody>");

        output = new MarkupString(html.ToString());
    }

    protected override Task OnInitializedAsync()
    {
        RenderDigits();

        var timer = new System.Threading.Timer((_) =>
        {
            RenderDigits();
            InvokeAsync(StateHasChanged);
        }, null, 0, 2000);

        return Task.CompletedTask;
    }
}